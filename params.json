{
  "name": "Luminous",
  "tagline": "Luminous gives you all the system information you need!",
  "body": "## Example\r\n\r\nTo run the example project, clone the repo, and run `pod install` from the Example directory first.\r\n\r\n## Requirements\r\n\r\n- iOS 8+\r\n- Swift 3\r\n- Xcode 8\r\n\r\n## Installation\r\n\r\nLuminous is available through [CocoaPods](http://cocoapods.org). To install\r\nit, simply add the following line to your Podfile:\r\n\r\n```ruby\r\npod \"Luminous\"\r\n```\r\n\r\n## Dependencies\r\n\r\nLuminous has only 1 dependency : [Deviice](https://github.com/andrealufino/Deviice) which is my other library useful to know on which device your app is running on, plus some nice information.\r\n\r\n## What is Luminous?\r\n\r\nLuminous is the son of [ALSystemUtilities](https://github.com/andrealufino/ALSystemUtilities) library which is no longer maintained (it still is my best library on github). I got ideas from that one and I wrote everything from scratch in Swift 3 adding some new feature and designing it in a different way thanks to the differences between Objective-C and Swift.\r\n\r\nLuminous is a big library that I like to consider an \"Helper Library\". It provides a lot of information about the system and has some features that can speed up significantly the development process.\r\n\r\nIt is composed by 3 parts :\r\n- system information (`Luminous.System.<substruct>`)\r\n- utils (some handy method like the email check)\r\n- custom app configuration\r\n\r\nHere we explain every one of these parts.\r\n\r\n### System information\r\n\r\nHere I provide tons of information about the system and you can access them using the notation `Luminous.System.<substruct>`.\r\n\r\nThere are 10 different substructs here from which you can get information :\r\n- `Network`\r\n    - `isConnectedViaWiFi`\r\n    - `isConnectedViaCellular`\r\n    - `SSID`\r\n- `Locale`\r\n    - `currentLanguage`\r\n    - `currentTimeZone`\r\n    - `currentTimeZoneName`\r\n    - `currentCountry`\r\n    - `currentCurrency`\r\n    - `currentCurrencySymbol`\r\n    - `usesMetricSystem`\r\n    - `decimalSeparator`\r\n- `Carrier`\r\n    - `carrierName`\r\n    - `carrierISOCountryCode`\r\n    - `carrierMobileCountryCode`\r\n    - `carrierNetworkCountryCode`\r\n    - `carrierAllowsVOIP`\r\n- `Hardware`\r\n    - `processorsNumber`\r\n    - `activeProcessorsNumber`\r\n    - `physicalMemory`\r\n    - `systemName`\r\n    - `systemVersion`\r\n    - `bootTime`\r\n    - `Screen`\r\n        - `brightness`\r\n        - `isScreenMirrored`\r\n        - `nativeBounds`\r\n        - `nativeScale`\r\n        - `bounds`\r\n        - `scale`\r\n        - `snapshotOfCurrentView`\r\n    - `Device`\r\n        - `current` (returns a [Deviice](https://github.com/andrealufino/Deviice) object)\r\n        - `identifierForVendor`\r\n        - `orientation`\r\n- `Accessory`\r\n    - `count`\r\n    - `connectedAccessoriesNames`\r\n    - `connectedAccessories`\r\n- `Disk`\r\n    - `totalSpace`\r\n    - `freeSpace`\r\n    - `usedSpace`\r\n    - `totalSpaceInBytes`\r\n    - `freeSpaceInBytes`\r\n    - `usedDiskSpaceInBytes`\r\n- `Battery`\r\n    - `level`\r\n    - `state`\r\n- `Application`\r\n    - `version`\r\n    - `clipboardString`\r\n\r\n### Utils\r\n\r\nThese part contains some handy methods useful during the development. Currently, we have only 3 methods here :\r\n- email check\r\n- save object in user defaults\r\n- generate a unique uuid\r\n\r\n### App Configuration\r\n\r\nThis is the most interesting part. There is an AppConfiguration struct which is not meant to be instantiated, but has an interface that can be used to save some useful information that can be reused frequently during the development.\r\n\r\nYou can access this information calling `Luminous.AppConfiguration.<property or function>`.\r\n\r\nThe `AppConfiguration` struct has these static properties :\r\n- `mainColor`\r\n- `secondColor`\r\n- `thirdColor`\r\n- `fourthColor`\r\n- `fifthColor`\r\n- `currentConfiguration` which is of type `LMAppConfiguration` (enum)\r\n- `serverBaseURLTeam`\r\n- `serverBaseURLDevelopment`\r\n- `serverBaseURLStage`\r\n- `serverBaseURLProduction`\r\n\r\nAnd these methods :\r\n- `set` to set all the properties in once\r\n- `serverBaseURLBasedOnCurrentConfiguration` to get the right server url based on the configuration\r\n\r\nYou can extend this struct to add your own properties and methods. For example, I use to extend this adding a substruct called `SegueIdentifiers` or `CellIdentifiers` where I save all the respective ids. This allows to keep everything in order and have a well readable code. Access an identifier using `Luminous.AppConfiguration.SegueIdentifiers.productDetails` is a lot better than anything else.\r\n\r\n## Why Luminous?\r\n\r\nI'm sure you're asking yourself \"Why this library is called Luminous?\". Well, stop think about it. The reason is simple : I like the word \"Luminous\", it gives me a unique feeling of something that is bright and awesome! So, I chose to call this lib in that way! But you can think that \"Luminous is because this library will light up your way of development speeding up it and giving you more time for yourself\", this is more philosophical.\r\n\r\n## Help\r\n\r\nAny suggestion would be really appreciated. The library is designed using structs and static functions, but I'm still not sure of this choice. I'm struggling if the best is to use static functions or static vars, so this is the first point you can help me with.\r\n\r\n## Author\r\n\r\nAndrea Mario Lufino, andrea.lufino@me.com\r\n\r\n## License\r\n\r\nLuminous is available under the MIT license. See the LICENSE file for more info.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}